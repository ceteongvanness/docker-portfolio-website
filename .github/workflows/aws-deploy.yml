# .github/workflows/aws-deploy.yml
name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: your-repo-name
  ECS_SERVICE: your-service-name
  ECS_CLUSTER: your-cluster-name
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: your-container-name

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    # Optional: Deploy to Elastic Beanstalk
    - name: Generate Dockerrun.aws.json
      if: success()
      run: |
        echo '{
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "${{ steps.build-image.outputs.image }}",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": 80,
              "HostPort": 80
            }
          ]
        }' > Dockerrun.aws.json

    - name: Deploy to AWS Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: your-application-name
        environment_name: your-environment-name
        version_label: ${{ github.sha }}
        region: ${{ env.AWS_REGION }}
        deployment_package: Dockerrun.aws.json

    - name: Health check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        health_status=$(aws elasticbeanstalk describe-environment-health \
          --environment-name your-environment-name \
          --attribute-names HealthStatus \
          --query "HealthStatus" \
          --output text)
        
        if [ "$health_status" != "Ok" ]; then
          echo "Deployment health check failed"
          exit 1
        fi
